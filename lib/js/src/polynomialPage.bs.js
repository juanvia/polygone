// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Constants = require("./Constants.bs.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var PolygoneModel = require("./polygoneModel.bs.js");

function PolynomialPage$PageTitle(Props) {
  return React.createElement("div", {
              className: "PageTitle"
            }, React.createElement("h1", undefined, "Get your polynomial"));
}

var PageTitle = /* module */[/* make */PolynomialPage$PageTitle];

function str(prim) {
  return prim;
}

function PolynomialPage$SectionHeader(Props) {
  var title = Props.title;
  var deck = Props.deck;
  return React.createElement("div", {
              className: "col-md-12 section-header"
            }, React.createElement("h3", {
                  className: "nogutter"
                }, title), React.createElement("div", undefined, deck));
}

var SectionHeader = /* module */[
  /* str */str,
  /* make */PolynomialPage$SectionHeader
];

function PolynomialPage$DataCard(Props) {
  var title = Props.title;
  var defaultValue = Props.defaultValue;
  var text = Props.text;
  var options = Props.options;
  var handleChange = Props.handleChange;
  return React.createElement("div", {
              className: "col-md datacard"
            }, React.createElement("h5", {
                  className: "datacard-title"
                }, title), React.createElement("div", {
                  className: "datacard-text"
                }, text), React.createElement("select", {
                  defaultValue: defaultValue,
                  className: "form-control bottom",
                  onChange: handleChange
                }, options));
}

var DataCard = /* module */[
  /* spoiledTitle */"uu",
  /* make */PolynomialPage$DataCard
];

function str$1(prim) {
  return prim;
}

function strindex(index) {
  return String(index + 1 | 0);
}

function stri(prim) {
  return String(prim);
}

function manyNumberOptions(howMany) {
  return $$Array.init(howMany, (function (index) {
                return React.createElement("option", {
                            key: String(index + 1 | 0),
                            value: String(index + 1 | 0)
                          }, String(index + 1 | 0));
              }));
}

var flavorOptions = React.createElement(React.Fragment, undefined, React.createElement("option", {
          value: "traditional"
        }, "Traditional"), React.createElement("option", {
          value: "pedantic"
        }, "Pedantic"));

function PolynomialPage$Form(Props) {
  var state = Props.state;
  var dispatch = Props.dispatch;
  var dimensions = String(state[/* dimensions */3]);
  var degree = String(state[/* degree */4]);
  var coefficientNotation = state[/* coefficientNotation */2];
  var variablesNotation = state[/* variablesNotation */1];
  var dimensionsList = manyNumberOptions(Constants.maxDimensions);
  var degreeList = manyNumberOptions(Constants.maxDegree);
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "row"
                }, React.createElement(PolynomialPage$SectionHeader, {
                      title: "How to get it?",
                      deck: "Change some values here and look down. It is waiting for you there."
                    })), React.createElement("div", {
                  className: "row"
                }, React.createElement(PolynomialPage$DataCard, {
                      title: "Dimensions",
                      defaultValue: dimensions,
                      text: "The polynomial's dimensions i.e. the number of independent variables.",
                      options: dimensionsList,
                      handleChange: (function (e) {
                          var value = Caml_format.caml_int_of_string(e.target.value);
                          return Curry._1(dispatch, /* SetDimensionsValue */Block.__(3, [value]));
                        })
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Degree",
                      defaultValue: degree,
                      text: "The polynomial's degree i.e. the maximum among the sums of the term exponents.",
                      options: degreeList,
                      handleChange: (function (e) {
                          var value = Caml_format.caml_int_of_string(e.target.value);
                          return Curry._1(dispatch, /* SetDegreeValue */Block.__(4, [value]));
                        })
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Coefficient notation",
                      defaultValue: PolygoneModel.Action[/* string_of_flavor */1](coefficientNotation),
                      text: "Traditional notation is in the form A,B,C,... Pedantic notation uses subindices of a.",
                      options: flavorOptions,
                      handleChange: (function (e) {
                          var value = PolygoneModel.Action[/* flavor_of_string */0](e.target.value);
                          return Curry._1(dispatch, /* SetCoefficientNotationValue */Block.__(2, [value]));
                        })
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Variables notation",
                      defaultValue: PolygoneModel.Action[/* string_of_flavor */1](variablesNotation),
                      text: "Traditional notation is in the form x,y,z,... Pedantic notation uses subindices of x.",
                      options: flavorOptions,
                      handleChange: (function (e) {
                          var value = e.target.value;
                          var value$1 = PolygoneModel.Action[/* flavor_of_string */0](value);
                          return Curry._1(dispatch, /* SetVariablesNotationValue */Block.__(1, [value$1]));
                        })
                    })));
}

var Form = /* module */[
  /* str */str$1,
  /* strindex */strindex,
  /* stri */stri,
  /* manyNumberOptions */manyNumberOptions,
  /* flavorOptions */flavorOptions,
  /* make */PolynomialPage$Form
];

function str$2(prim) {
  return prim;
}

function PolynomialPage$Page(Props) {
  var state = Props.state;
  var dispatch = Props.dispatch;
  return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement(PolynomialPage$PageTitle, { })), React.createElement(PolynomialPage$Form, {
                  state: state,
                  dispatch: dispatch
                }), React.createElement("div", undefined, "Polynomial"), React.createElement("div", undefined, "Matrix"));
}

var Page = /* module */[
  /* str */str$2,
  /* make */PolynomialPage$Page
];

exports.PageTitle = PageTitle;
exports.SectionHeader = SectionHeader;
exports.DataCard = DataCard;
exports.Form = Form;
exports.Page = Page;
/* flavorOptions Not a pure module */
