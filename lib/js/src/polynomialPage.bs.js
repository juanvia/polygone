// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var React = require("react");
var Constants = require("./Constants.bs.js");

function PolynomialPage$PageTitle(Props) {
  return React.createElement("div", {
              className: "PageTitle"
            }, React.createElement("h1", undefined, "Get your polynomial"));
}

var PageTitle = /* module */[/* make */PolynomialPage$PageTitle];

function str(prim) {
  return prim;
}

function PolynomialPage$SectionHeader(Props) {
  var title = Props.title;
  var deck = Props.deck;
  return React.createElement("div", {
              className: "col-md-12 section-header"
            }, React.createElement("h3", {
                  className: "nogutter"
                }, title), React.createElement("div", undefined, deck));
}

var SectionHeader = /* module */[
  /* str */str,
  /* make */PolynomialPage$SectionHeader
];

function PolynomialPage$DataCard(Props) {
  var title = Props.title;
  var defaultValue = Props.defaultValue;
  var text = Props.text;
  var options = Props.options;
  return React.createElement("div", {
              className: "col-md datacard"
            }, React.createElement("h5", {
                  className: "datacard-title"
                }, title), React.createElement("div", {
                  className: "datacard-text"
                }, text), React.createElement("select", {
                  defaultValue: defaultValue,
                  className: "form-control bottom"
                }, options));
}

var DataCard = /* module */[/* make */PolynomialPage$DataCard];

function str$1(prim) {
  return prim;
}

function strindex(index) {
  return String(index + 1 | 0);
}

function stri(prim) {
  return String(prim);
}

function manyNumberOptions(howMany) {
  return $$Array.init(howMany, (function (index) {
                return React.createElement("option", {
                            key: String(index + 1 | 0),
                            value: String(index + 1 | 0)
                          }, String(index + 1 | 0));
              }));
}

var flavorOptions = React.createElement(React.Fragment, undefined, React.createElement("option", {
          value: "traditional"
        }, "Traditional"), React.createElement("option", {
          value: "pedantic"
        }, "Pedantic"));

var title = "How to get it?";

var deck = "Change some values here and look down. It is waiting for you there.";

function PolynomialPage$Form(Props) {
  Props.dimensions;
  Props.degree;
  var dimensionsList = manyNumberOptions(Constants.maxDimensions);
  var degreeList = manyNumberOptions(Constants.maxDegree);
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "row"
                }, React.createElement(PolynomialPage$SectionHeader, {
                      title: title,
                      deck: deck
                    })), React.createElement("div", undefined, String(3), React.createElement("br", undefined), String(3)), React.createElement("div", {
                  className: "row"
                }, React.createElement(PolynomialPage$DataCard, {
                      title: "Set the dimensions",
                      defaultValue: String(3),
                      text: "Enter the polynomial's dimensions i.e. the number of independent variables.",
                      options: dimensionsList
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Set the degree",
                      defaultValue: String(3),
                      text: "Enter the polynomial's degree i.e. the maximum sum of the term exponents.",
                      options: degreeList
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Set the coefficient notation",
                      defaultValue: "traditional",
                      text: "Traditional notation is in the form A,B,C,... Pedantic notation uses subindices of a.",
                      options: flavorOptions
                    }), React.createElement(PolynomialPage$DataCard, {
                      title: "Set the variables notation",
                      defaultValue: "traditional",
                      text: "Traditional notation is in the form x,y,z,... Pedantic notation uses subindices of x.",
                      options: flavorOptions
                    })));
}

var Form = /* module */[
  /* str */str$1,
  /* strindex */strindex,
  /* stri */stri,
  /* manyNumberOptions */manyNumberOptions,
  /* flavorOptions */flavorOptions,
  /* title */title,
  /* deck */deck,
  /* make */PolynomialPage$Form
];

function str$2(prim) {
  return prim;
}

function PolynomialPage$Page(Props) {
  var dimensions = Props.dimensions;
  var degree = Props.degree;
  return React.createElement("div", undefined, React.createElement("div", undefined, React.createElement(PolynomialPage$PageTitle, { })), React.createElement(PolynomialPage$Form, {
                  dimensions: dimensions,
                  degree: degree
                }), React.createElement("div", undefined, "Polynomial"), React.createElement("div", undefined, "Matrix"));
}

var Page = /* module */[
  /* str */str$2,
  /* make */PolynomialPage$Page
];

exports.PageTitle = PageTitle;
exports.SectionHeader = SectionHeader;
exports.DataCard = DataCard;
exports.Form = Form;
exports.Page = Page;
/* flavorOptions Not a pure module */
